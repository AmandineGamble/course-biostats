# if (distribution == "Normal"){
# Value = rnorm(nn, mean = parA1 , sd = parA2)
#   Value = reactive(rnorm(input$nn, input$parA1, input$parA2))
#   #dataA$Value = reactive(input$nn, input$parA1, input$parA2)
# # }
# #
# #
# dataA$Value <- reactive(Value())
# dataA = as.data.frame(dataA)
# dataA$Dataset = "Dataset A"
dataA <- reactive({
if (distribution() == "Normal"){
data.frame(Value = rnorm(input$nn, input$parA1, input$parA2), Dataset = "Dataset A")
}else if (distribution() == "Beta"){
data.frame(Value = rbeta(input$nn, shape1 = input$parA1, shape2 = input$parA2), Dataset = "Dataset A")
}else if (distribution() == "Gamma"){
data.frame(Value = rgamma(input$nn, shape = input$parA1, rate = input$parA2), Dataset = "Dataset A")
}
})
# Plots
#lim = c(min(dataA()$Value), max(dataA()$Value))
output$visual <- renderPlot({
p_mean = ggplot(data = dataA(), aes(x = Dataset)) +
geom_point(y = mean(dataA()$Value), size = 10) +
geom_errorbar(aes(
ymin = mean(dataA()$Value) - sd(dataA()$Value),
ymax = mean(dataA()$Value) + sd(dataA()$Value)
),
width = .2) +
ylab("Value (mean and standard deviation)") +
ggtheme + theme(axis.text.x = element_blank())
p_box = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_boxplot() +
ggtheme + theme(axis.text.x = element_blank())
p_violin = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_violin() +
ggtheme + theme(axis.text.x = element_blank())
p_scatter = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_point(alpha = alpha) +
ggtheme + theme(axis.text.x = element_blank())
p_jitter = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_jitter(alpha = alpha,
width = 0.1,
height = 0) +
ggtheme + theme(axis.text.x = element_blank())
p_box_jitter = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_boxplot() +
geom_jitter(alpha = alpha,
width = 0.1,
height = 0) +
ggtheme + theme(axis.text.x = element_blank())
p_violin_jitter = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_violin() +
geom_jitter(alpha = alpha,
width = 0.1,
height = 0) +
ggtheme + theme(axis.text.x = element_blank())
if (input$plot == "Mean and standard deviation")  {
print(p_mean)
}
if (input$plot == "Box plot")  {
print(p_box)
}
if (input$plot == "Violin plot")  {
print(p_violin)
}
if (input$plot == "Scatter plot")  {
print(p_scatter)
}
if (input$plot == "Jittered scatter plot")  {
print(p_jitter)
}
if (input$plot == "Box plot + jittered scatter plot")  {
print(p_box_jitter)
}
if (input$plot == "Violin plot + jittered scatter plot")  {
print(p_violin_jitter)
}
})
output$histogram <- renderPlot({
ggplot(data = dataA(), aes(x = Value)) +
geom_histogram() +
ylab("Count") +
ggtheme
})
}
shinyApp(ui=ui, server=server)
library(shiny)
library(shinyWidgets)
library(ggplot2)
ggtheme = theme_bw() +
theme(
plot.title = element_text(size = 12, face = "bold",  margin=margin(2, 2, 2, 2)),
plot.subtitle = element_text(size = 12, hjust = 0.5, margin=margin(0, 0, 0, 0)),
plot.margin = margin(5, 5, 5, 5),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.title.y.right = element_text(angle = 90),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12, color = "black"),
axis.line = element_line(size = 0.25, color = "black"),
axis.ticks = element_line(size = 0.25, color = "black"),
strip.text = element_text(size = 12, margin=margin(1, 1, 2, 2)),
strip.background = element_blank(),
legend.margin = margin(2, 2, 2, 2),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.key = element_rect(fill = NA, color = NA),
legend.key.size = unit(0.4, "cm"),
legend.background = element_rect(colour = "transparent", fill = ggplot2::alpha("white", 0)),
legend.position = "none"
)
distributions = c("Normal", "Beta", "Gamma")
alpha = 0.5
dataA=NULL
ui <- fluidPage(
titlePanel("Data distribution"),
sidebarLayout(
sidebarPanel(
# inputs
selectizeInput("disA", "Distribution",
choices = distributions,
selected = "Normal", multiple = FALSE),
sliderInput("parA1", "Parameter 1", min = 1, max = 10,
value = 1, step = 0.1),
sliderInput("parA2", "Parameter 2", min = 1, max = 10,
value = 1, step = 0.1),
sliderInput("nn", "Sample size", min = 2, max = 5000,
value = 1000),
selectizeInput("plot", "Plot",
choices = c("Mean and standard deviation", "Box plot", "Violin plot",
"Scatter plot", "Jittered scatter plot",
"Box plot + jittered scatter plot", "Violin plot + jittered scatter plot"),
multiple = FALSE)
),
mainPanel(
h1("Distribution Exploration App"),
h2("Selected plot"),
plotOutput("visual"),
h2("Histogram"),
plotOutput("histogram")
)
)
)
server <- function(input, output) {
# Data generation
distribution = reactive(input$disA)
# parA1 = reactive(input$parA1)
# parA2 = reactive(input$parA2)
# nn = reactive(input$nn)
# if (distribution == "Normal"){
# Value = rnorm(nn, mean = parA1 , sd = parA2)
#   Value = reactive(rnorm(input$nn, input$parA1, input$parA2))
#   #dataA$Value = reactive(input$nn, input$parA1, input$parA2)
# # }
# #
# #
# dataA$Value <- reactive(Value())
# dataA = as.data.frame(dataA)
# dataA$Dataset = "Dataset A"
dataA <- reactive({
if (distribution() == "Normal"){
data.frame(Value = rnorm(input$nn, input$parA1, input$parA2), Dataset = "Dataset A")
}else if (distribution() == "Beta"){
data.frame(Value = rbeta(input$nn, shape1 = input$parA1, shape2 = input$parA2), Dataset = "Dataset A")
}else if (distribution() == "Gamma"){
data.frame(Value = rgamma(input$nn, shape = input$parA1, rate = input$parA2), Dataset = "Dataset A")
}
})
# Plots
#lim = c(min(dataA()$Value), max(dataA()$Value))
output$visual <- renderPlot({
p_mean = ggplot(data = dataA(), aes(x = Dataset)) +
geom_point(y = mean(dataA()$Value), size = 10) +
geom_errorbar(aes(
ymin = mean(dataA()$Value) - sd(dataA()$Value),
ymax = mean(dataA()$Value) + sd(dataA()$Value)
),
width = .2) +
ylab("Value (mean and standard deviation)") +
ggtheme + theme(axis.text.x = element_blank())
p_box = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_boxplot() +
ggtheme + theme(axis.text.x = element_blank())
p_violin = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_violin() +
ggtheme + theme(axis.text.x = element_blank())
p_scatter = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_point(alpha = alpha) +
ggtheme + theme(axis.text.x = element_blank())
p_jitter = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_jitter(alpha = alpha,
width = 0.1,
height = 0) +
ggtheme + theme(axis.text.x = element_blank())
p_box_jitter = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_boxplot() +
geom_jitter(alpha = alpha,
width = 0.1,
height = 0) +
ggtheme + theme(axis.text.x = element_blank())
p_violin_jitter = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_violin() +
geom_jitter(alpha = alpha,
width = 0.1,
height = 0) +
ggtheme + theme(axis.text.x = element_blank())
if (input$plot == "Mean and standard deviation")  {
print(p_mean)
}
if (input$plot == "Box plot")  {
print(p_box)
}
if (input$plot == "Violin plot")  {
print(p_violin)
}
if (input$plot == "Scatter plot")  {
print(p_scatter)
}
if (input$plot == "Jittered scatter plot")  {
print(p_jitter)
}
if (input$plot == "Box plot + jittered scatter plot")  {
print(p_box_jitter)
}
if (input$plot == "Violin plot + jittered scatter plot")  {
print(p_violin_jitter)
}
})
output$histogram <- renderPlot({
ggplot(data = dataA(), aes(x = Value)) +
geom_histogram(color = "black") +
ylab("Count") +
ggtheme
})
}
shinyApp(ui=ui, server=server)
library(shiny)
library(shinyWidgets)
library(ggplot2)
ggtheme = theme_bw() +
theme(
plot.title = element_text(size = 12, face = "bold",  margin=margin(2, 2, 2, 2)),
plot.subtitle = element_text(size = 12, hjust = 0.5, margin=margin(0, 0, 0, 0)),
plot.margin = margin(5, 5, 5, 5),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.title.y.right = element_text(angle = 90),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12, color = "black"),
axis.line = element_line(size = 0.25, color = "black"),
axis.ticks = element_line(size = 0.25, color = "black"),
strip.text = element_text(size = 12, margin=margin(1, 1, 2, 2)),
strip.background = element_blank(),
legend.margin = margin(2, 2, 2, 2),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.key = element_rect(fill = NA, color = NA),
legend.key.size = unit(0.4, "cm"),
legend.background = element_rect(colour = "transparent", fill = ggplot2::alpha("white", 0)),
legend.position = "none"
)
distributions = c("Normal", "Beta", "Gamma")
alpha = 0.5
dataA=NULL
ui <- fluidPage(
titlePanel("Data distribution"),
sidebarLayout(
sidebarPanel(
# inputs
selectizeInput("disA", "Distribution",
choices = distributions,
selected = "Normal", multiple = FALSE),
sliderInput("parA1", "Parameter 1", min = 1, max = 10,
value = 1, step = 0.1),
sliderInput("parA2", "Parameter 2", min = 1, max = 10,
value = 1, step = 0.1),
sliderInput("nn", "Sample size", min = 2, max = 5000,
value = 1000),
selectizeInput("plot", "Plot",
choices = c("Mean and standard deviation", "Box plot", "Violin plot",
"Scatter plot", "Jittered scatter plot",
"Box plot + jittered scatter plot", "Violin plot + jittered scatter plot"),
multiple = FALSE)
),
mainPanel(
plotOutput("histogram"),
plotOutput("visual")
)
)
)
server <- function(input, output) {
# Data generation
distribution = reactive(input$disA)
# parA1 = reactive(input$parA1)
# parA2 = reactive(input$parA2)
# nn = reactive(input$nn)
# if (distribution == "Normal"){
# Value = rnorm(nn, mean = parA1 , sd = parA2)
#   Value = reactive(rnorm(input$nn, input$parA1, input$parA2))
#   #dataA$Value = reactive(input$nn, input$parA1, input$parA2)
# # }
# #
# #
# dataA$Value <- reactive(Value())
# dataA = as.data.frame(dataA)
# dataA$Dataset = "Dataset A"
dataA <- reactive({
if (distribution() == "Normal"){
data.frame(Value = rnorm(input$nn, input$parA1, input$parA2), Dataset = "Dataset A")
}else if (distribution() == "Beta"){
data.frame(Value = rbeta(input$nn, shape1 = input$parA1, shape2 = input$parA2), Dataset = "Dataset A")
}else if (distribution() == "Gamma"){
data.frame(Value = rgamma(input$nn, shape = input$parA1, rate = input$parA2), Dataset = "Dataset A")
}
})
# Plots
#lim = c(min(dataA()$Value), max(dataA()$Value))
output$histogram <- renderPlot({
ggplot(data = dataA(), aes(x = Value)) +
geom_histogram() +
ylab("Count") +
ggtheme
})
output$visual <- renderPlot({
#
p_mean = ggplot(data = dataA(), aes(x = Dataset)) +
geom_point(y = mean(dataA()$Value), size = 10) +
geom_errorbar(aes(ymin = mean(dataA()$Value) - sd(dataA()$Value), ymax = mean(dataA()$Value) + sd(dataA()$Value)),
width=.2) +
ylab("Value (mean and standard deviation)") +
ggtheme + theme(axis.text.x = element_blank())
p_box = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_boxplot() +
ggtheme + theme(axis.text.x = element_blank())
p_violin = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_violin() +
ggtheme + theme(axis.text.x = element_blank())
p_scatter = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_point(alpha = alpha) +
ggtheme + theme(axis.text.x = element_blank())
p_jitter = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_jitter(alpha = alpha, width = 0.1, height = 0) +
ggtheme + theme(axis.text.x = element_blank())
p_box_jitter = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_boxplot() +
geom_jitter(alpha = alpha, width = 0.1, height = 0) +
ggtheme + theme(axis.text.x = element_blank())
p_violin_jitter = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_violin() +
geom_jitter(alpha = alpha, width = 0.1, height = 0) +
ggtheme + theme(axis.text.x = element_blank())
if (input$plot == "Mean and standard deviation")  {print(p_mean)}
if (input$plot == "Box plot")  {print(p_box)}
if (input$plot == "Violin plot")  {print(p_violin)}
if (input$plot == "Scatter plot")  {print(p_scatter)}
if (input$plot == "Jittered scatter plot")  {print(p_jitter)}
if (input$plot == "Box plot + jittered scatter plot")  {print(p_box_jitter)}
if (input$plot == "Violin plot + jittered scatter plot")  {print(p_violin_jitter)}
})
}
shinyApp(ui=ui, server=server)
detach("package:ggdark", unload = TRUE)
library(shiny)
library(shinyWidgets)
library(ggplot2)
ggtheme = theme_bw() +
theme(
plot.title = element_text(size = 12, face = "bold",  margin=margin(2, 2, 2, 2)),
plot.subtitle = element_text(size = 12, hjust = 0.5, margin=margin(0, 0, 0, 0)),
plot.margin = margin(5, 5, 5, 5),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.title.y.right = element_text(angle = 90),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12, color = "black"),
axis.line = element_line(size = 0.25, color = "black"),
axis.ticks = element_line(size = 0.25, color = "black"),
strip.text = element_text(size = 12, margin=margin(1, 1, 2, 2)),
strip.background = element_blank(),
legend.margin = margin(2, 2, 2, 2),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.key = element_rect(fill = NA, color = NA),
legend.key.size = unit(0.4, "cm"),
legend.background = element_rect(colour = "transparent", fill = ggplot2::alpha("white", 0)),
legend.position = "none"
)
distributions = c("Normal", "Beta", "Gamma")
alpha = 0.5
dataA=NULL
ui <- fluidPage(
titlePanel("Data distribution"),
sidebarLayout(
sidebarPanel(
# inputs
selectizeInput("disA", "Distribution",
choices = distributions,
selected = "Normal", multiple = FALSE),
sliderInput("parA1", "Parameter 1", min = 1, max = 10,
value = 1, step = 0.1),
sliderInput("parA2", "Parameter 2", min = 1, max = 10,
value = 1, step = 0.1),
sliderInput("nn", "Sample size", min = 2, max = 5000,
value = 1000),
selectizeInput("plot", "Plot",
choices = c("Mean and standard deviation", "Box plot", "Violin plot",
"Scatter plot", "Jittered scatter plot",
"Box plot + jittered scatter plot", "Violin plot + jittered scatter plot"),
multiple = FALSE)
),
mainPanel(
h1("Selected plot"),
plotOutput("visual"),
h1("Histogram"),
plotOutput("histogram")
)
)
)
server <- function(input, output) {
# Data generation
distribution = reactive(input$disA)
# parA1 = reactive(input$parA1)
# parA2 = reactive(input$parA2)
# nn = reactive(input$nn)
# if (distribution == "Normal"){
# Value = rnorm(nn, mean = parA1 , sd = parA2)
#   Value = reactive(rnorm(input$nn, input$parA1, input$parA2))
#   #dataA$Value = reactive(input$nn, input$parA1, input$parA2)
# # }
# #
# #
# dataA$Value <- reactive(Value())
# dataA = as.data.frame(dataA)
# dataA$Dataset = "Dataset A"
dataA <- reactive({
if (distribution() == "Normal"){
data.frame(Value = rnorm(input$nn, input$parA1, input$parA2), Dataset = "Dataset A")
}else if (distribution() == "Beta"){
data.frame(Value = rbeta(input$nn, shape1 = input$parA1, shape2 = input$parA2), Dataset = "Dataset A")
}else if (distribution() == "Gamma"){
data.frame(Value = rgamma(input$nn, shape = input$parA1, rate = input$parA2), Dataset = "Dataset A")
}
})
# Plots
#lim = c(min(dataA()$Value), max(dataA()$Value))
output$visual <- renderPlot({
p_mean = ggplot(data = dataA(), aes(x = Dataset)) +
geom_point(y = mean(dataA()$Value), size = 10) +
geom_errorbar(aes(
ymin = mean(dataA()$Value) - sd(dataA()$Value),
ymax = mean(dataA()$Value) + sd(dataA()$Value)
),
width = .2) +
ylab("Value (mean and standard deviation)") +
ggtheme + theme(axis.text.x = element_blank())
p_box = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_boxplot() +
ggtheme + theme(axis.text.x = element_blank())
p_violin = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_violin() +
ggtheme + theme(axis.text.x = element_blank())
p_scatter = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_point(alpha = alpha) +
ggtheme + theme(axis.text.x = element_blank())
p_jitter = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_jitter(alpha = alpha,
width = 0.1,
height = 0) +
ggtheme + theme(axis.text.x = element_blank())
p_box_jitter = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_boxplot() +
geom_jitter(alpha = alpha,
width = 0.1,
height = 0) +
ggtheme + theme(axis.text.x = element_blank())
p_violin_jitter = ggplot(data = dataA(), aes(x = Dataset, y = Value)) +
geom_violin() +
geom_jitter(alpha = alpha,
width = 0.1,
height = 0) +
ggtheme + theme(axis.text.x = element_blank())
if (input$plot == "Mean and standard deviation")  {
print(p_mean)
}
if (input$plot == "Box plot")  {
print(p_box)
}
if (input$plot == "Violin plot")  {
print(p_violin)
}
if (input$plot == "Scatter plot")  {
print(p_scatter)
}
if (input$plot == "Jittered scatter plot")  {
print(p_jitter)
}
if (input$plot == "Box plot + jittered scatter plot")  {
print(p_box_jitter)
}
if (input$plot == "Violin plot + jittered scatter plot")  {
print(p_violin_jitter)
}
})
output$histogram <- renderPlot({
ggplot(data = dataA(), aes(x = Value)) +
geom_histogram(color = "black") +
ylab("Count") +
ggtheme
})
}
shinyApp(ui=ui, server=server)
